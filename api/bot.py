from flask import Flask, request
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters
import asyncio
import os
import datetime

# ----------------- –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø -----------------
TOKEN = os.environ.get("TOKEN")  # Token Telegram –±–æ—Ç–∞ (Vercel ENV)
CHAT_ID = int(os.environ.get("CHAT_ID", -1002863526087))
ADMIN_ID = int(os.environ.get("ADMIN_ID", 634560479))

if not TOKEN:
    raise RuntimeError("‚ö†Ô∏è TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ Environment Variables!")

# ----------------- –°–¢–ï–ô–¢–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô -----------------
user_states = {}  # {user_id: state}

# ----------------- Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ -----------------
app = Flask(__name__)

# ----------------- Telegram Application -----------------
application = Application.builder().token(TOKEN).build()

# ----------------- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò -----------------
def get_user_link(user):
    if user.username:
        return f"@{user.username}"
    else:
        return f"<a href='tg://user?id={user.id}'>{user.first_name}</a>"

# ----------------- –ö–û–ú–ê–ù–î–´ -----------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üí≥ 1000 ‚ÇΩ ‚Äî 1 –º–µ—Å—è—Ü", callback_data="plan_1000_1")],
        [InlineKeyboardButton("üí≥ 2900 ‚ÇΩ ‚Äî 3 –º–µ—Å—è—Ü–∞", callback_data="plan_2900_3")],
        [InlineKeyboardButton("üí≥ 5500 ‚ÇΩ ‚Äî 6 –º–µ—Å—è—Ü–µ–≤", callback_data="plan_5500_6")],
        [InlineKeyboardButton("üí≥ 10 000 ‚ÇΩ ‚Äî 12 –º–µ—Å—è—Ü–µ–≤", callback_data="plan_10000_12")],
        [InlineKeyboardButton("üì© –ü–æ–º–æ—â—å", url="https://t.me/Russian_2652")]
    ]
    await update.message.reply_text(
        "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –∏ –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—É–º–º—É –Ω–∞ –∫–∞—Ä—Ç—É:\n"
        "üìå 2204 3101 7224 7291\n\n"
        "–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞.",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def select_plan(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    price, months = query.data.split("_")[1], query.data.split("_")[2]
    user_id = query.from_user.id
    user_states[user_id] = {"state": "waiting_screenshot", "plan": f"{price}‚ÇΩ / {months} –º–µ—Å."}
    await query.message.reply_text(f"üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã —Ç–∞—Ä–∏—Ñ–∞ {price}‚ÇΩ –∑–∞ {months} –º–µ—Å.")

async def handle_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    state = user_states.get(user_id)

    if state == "waiting_screenshot" or (isinstance(state, dict) and state.get("state") == "waiting_screenshot"):
        kb = [
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"approve_{user_id}")],
            [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{user_id}")]
        ]

        if update.message.photo:
            msg = await context.bot.send_photo(
                chat_id=ADMIN_ID,
                photo=update.message.photo[-1].file_id,
                caption=f"üí∞ –ó–∞—è–≤–∫–∞ –æ—Ç {get_user_link(update.message.from_user)}",
                reply_markup=InlineKeyboardMarkup(kb),
                parse_mode="HTML"
            )
        elif update.message.document:
            msg = await context.bot.send_document(
                chat_id=ADMIN_ID,
                document=update.message.document.file_id,
                caption=f"üí∞ –ó–∞—è–≤–∫–∞ –æ—Ç {get_user_link(update.message.from_user)}",
                reply_markup=InlineKeyboardMarkup(kb),
                parse_mode="HTML"
            )
        else:
            return

        user_states[user_id] = None
        user_states[f"admin_msg_{user_id}"] = msg.message_id

async def approve(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = int(query.data.split("_")[1])

    expire_time = datetime.datetime.now() + datetime.timedelta(days=30)
    invite_link = await context.bot.create_chat_invite_link(
        chat_id=CHAT_ID,
        expire_date=expire_time,
        member_limit=1
    )
    await context.bot.send_message(chat_id=user_id, text=f"üéâ –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞: {invite_link.invite_link}")

    admin_msg_id = user_states.pop(f"admin_msg_{user_id}", None)
    if admin_msg_id:
        await context.bot.delete_message(chat_id=ADMIN_ID, message_id=admin_msg_id)

async def reject(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = int(query.data.split("_")[1])
    await context.bot.send_message(chat_id=user_id, text="‚ùå –î–æ—Å—Ç—É–ø –æ—Ç–∫–ª–æ–Ω—ë–Ω. –ü—Ä–∏—á–∏–Ω–∞: –Ω–µ—Ç –æ–ø–ª–∞—Ç—ã")

    admin_msg_id = user_states.pop(f"admin_msg_{user_id}", None)
    if admin_msg_id:
        await context.bot.delete_message(chat_id=ADMIN_ID, message_id=admin_msg_id)

# ----------------- –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í -----------------
application.add_handler(CommandHandler("start", start))
application.add_handler(CallbackQueryHandler(select_plan, pattern="^plan_"))
application.add_handler(CallbackQueryHandler(approve, pattern="^approve_"))
application.add_handler(CallbackQueryHandler(reject, pattern="^reject_"))
application.add_handler(MessageHandler(filters.PHOTO | filters.Document.IMAGE, handle_file))

# ----------------- FLASK SERVERLESS -----------------
@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    data = request.get_json(force=True)
    update = Update.de_json(data, application.bot)
    asyncio.get_event_loop().create_task(application.process_update(update))
    return "ok"

@app.route("/")
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ Webhook!"
